'''
A sample script for running the reversal stage of a system

Created on May 15, 2018

@author: lvotapka
'''

import seekr
from seekr import amber
import sys, os
from simtk.unit import *
import mdtraj

print "Parse arguments"
which = None
if len(sys.argv) < 2: # then assume all
  which = 'all'
elif sys.argv[1] == 'all':
  which = 'all'
else:
  which = int(sys.argv[1])

print "Loading SEEKR calculation."

##################################################################
# VARIABLES WITHIN SECTION BELOW SHOULD BE MODIFIED TO YOUR SYSTEM
##################################################################

root_dir = '/home/astokely/membranes/codeine_membrane_test/' #The directory that all of the files generated by a SEEKR simulation are written to.
picklename = root_dir + 'seekr_calc.pickle'
me = seekr.openSeekrCalc(picklename)

lig_selection = [38093, 38094, 38095, 38096, 38097, 38098, 38099, 38100, 38101, 38102, 38103, 38104, 38105, 38106, 38107, 38108, 38109, 38110, 38111, 38112, 38113, 38114]

#The Phosphorus atoms in the membrane that were used to calculate the system's origin.
rec_selection = [19, 137, 255, 373, 491, 609, 727, 845, 963, 1081, 1199, 1317, 1435, 1553, 1671, 1789, 1907, 2025, 2143, 2261, 2379, 2497, 2615, 2733, 2851, 2969, 3087, 3205, 3323, 3441, 3559, 3677, 3795, 3913, 4031, 4149, 4267, 4385, 4503, 4621, 4739, 4857, 4975, 5093, 5211, 5329, 5447, 5565, 5683, 5801, 5919, 6037, 6155, 6273, 6391, 6509, 6627, 6745, 6863, 6981, 7099, 7217, 7335, 7453, 7571, 7689, 7807, 7925, 8043, 8161, 8279, 8397, 8515, 8633, 8751, 8869, 8987, 9105, 9223, 9341, 9459, 9577, 9695, 9813, 9931, 10049, 10167, 10285, 10403, 10521, 10639, 10757, 10875, 10993, 11111, 11229, 11347, 11465, 11583, 11701, 11819, 11937, 12055, 12173, 12291, 12409, 12527, 12645, 12763, 12881, 12999, 13117, 13235, 13353, 13471, 13589, 13707, 13825, 13943, 14061, 14179, 14297, 14415, 14533, 14651, 14769, 14887, 15005] 


step_chunk_size = 1000
me.fwd_rev_stage.steps = step_chunk_size # in 2*fs
me.fwd_rev_stage.energy_freq = 1000
me.fwd_rev_stage.traj_freq = 1000
me.fwd_rev_stage.launches_per_config = 1
me.fwd_rev_stage.barostat = False # leave barostat off
umbrella_glob = 'umbrella*.dcd'
reversal_frames = (1010, 10010, 1)
transition_filename = 'transition_rev.dat'

##################################################################
# DON'T MODIFY THE SECTION BELOW UNLESS YOU KNOW WHAT YOU'RE DOING
##################################################################
\]'\]'
  all_milestones = me.milestones
else:
  all_milestones = [me.milestones[which]]
  
for milestone in all_milestones:
  if milestone.md:
    if not milestone.openmm.charmm_params_filename_list: 
      print "charmm params not found for milestone %d. Skipping..." % milestone.index
      continue
    print "launching constant energy reverse stage for milestone:", which
    box_vectors = milestone.box_vectors
    milestone.atom_selection_1 = rec_selection
    milestone.atom_selection_2 = lig_selection
    fwd_rev_path = os.path.join(me.project.rootdir, milestone.directory, 'md', 'fwd_rev')
    umbrella_traj = os.path.join(me.project.rootdir, milestone.directory, 'md', 'umbrella', umbrella_glob)
    parm_file_name = os.path.join(me.project.rootdir, milestone.directory, 'md', 'building', 'holo.parm7')
    trajout = os.path.join(me.project.rootdir, milestone.directory, 'md', 'umbrella', 'imaged.dcd')
    cpptraj_script_location = os.path.join(me.project.rootdir, milestone.directory, 'md', 'umbrella', 'image_umbrella.cpptraj')
    box_info = seekr.make_box_info(box_vectors)
    seekr.autoimage_traj(parm_file_name, umbrella_traj, trajout, box_info, cpptraj_script_location=cpptraj_script_location, writing_frames=reversal_frames)
    dcd = mdtraj.iterload(trajout, top=parm_file_name, chunk=1)
    traj_base = "reverse"
    print "running reversals"
    success_positions, success_velocities, data_file_name, indices_list = seekr.launch_fwd_rev_stage(me, milestone, traj_base, True, dcd, box_vectors=box_vectors, transition_filename=transition_filename)
    if len(success_positions) == 0:
      print "Reversal stage failed: No successful reversal trajectories completed."
    else:
      print "saving coordinates and velocities for the reversal stage. len(success_positions)", len(success_positions), "len(success_velocities):", len(success_velocities)
      seekr.pickle_coords_vels(me, milestone, success_positions, success_velocities)
      me.save()
    
