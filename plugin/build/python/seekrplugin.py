# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_seekrplugin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_seekrplugin')
    _seekrplugin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_seekrplugin', [dirname(__file__)])
        except ImportError:
            import _seekrplugin
            return _seekrplugin
        try:
            _mod = imp.load_module('_seekrplugin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _seekrplugin = swig_import_helper()
    del swig_import_helper
else:
    import _seekrplugin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import simtk.openmm
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _seekrplugin.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _seekrplugin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _seekrplugin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _seekrplugin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _seekrplugin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _seekrplugin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _seekrplugin.SwigPyIterator_copy(self)

    def next(self):
        return _seekrplugin.SwigPyIterator_next(self)

    def __next__(self):
        return _seekrplugin.SwigPyIterator___next__(self)

    def previous(self):
        return _seekrplugin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _seekrplugin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _seekrplugin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _seekrplugin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _seekrplugin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _seekrplugin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _seekrplugin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _seekrplugin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _seekrplugin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _seekrplugin.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seekrplugin.vectord___nonzero__(self)

    def __bool__(self):
        return _seekrplugin.vectord___bool__(self)

    def __len__(self):
        return _seekrplugin.vectord___len__(self)

    def __getslice__(self, i, j):
        return _seekrplugin.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seekrplugin.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seekrplugin.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seekrplugin.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seekrplugin.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seekrplugin.vectord___setitem__(self, *args)

    def pop(self):
        return _seekrplugin.vectord_pop(self)

    def append(self, x):
        return _seekrplugin.vectord_append(self, x)

    def empty(self):
        return _seekrplugin.vectord_empty(self)

    def size(self):
        return _seekrplugin.vectord_size(self)

    def swap(self, v):
        return _seekrplugin.vectord_swap(self, v)

    def begin(self):
        return _seekrplugin.vectord_begin(self)

    def end(self):
        return _seekrplugin.vectord_end(self)

    def rbegin(self):
        return _seekrplugin.vectord_rbegin(self)

    def rend(self):
        return _seekrplugin.vectord_rend(self)

    def clear(self):
        return _seekrplugin.vectord_clear(self)

    def get_allocator(self):
        return _seekrplugin.vectord_get_allocator(self)

    def pop_back(self):
        return _seekrplugin.vectord_pop_back(self)

    def erase(self, *args):
        return _seekrplugin.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _seekrplugin.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _seekrplugin.vectord_push_back(self, x)

    def front(self):
        return _seekrplugin.vectord_front(self)

    def back(self):
        return _seekrplugin.vectord_back(self)

    def assign(self, n, x):
        return _seekrplugin.vectord_assign(self, n, x)

    def resize(self, *args):
        return _seekrplugin.vectord_resize(self, *args)

    def insert(self, *args):
        return _seekrplugin.vectord_insert(self, *args)

    def reserve(self, n):
        return _seekrplugin.vectord_reserve(self, n)

    def capacity(self):
        return _seekrplugin.vectord_capacity(self)
    __swig_destroy__ = _seekrplugin.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _seekrplugin.vectord_swigregister
vectord_swigregister(vectord)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _seekrplugin.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _seekrplugin.vectori___nonzero__(self)

    def __bool__(self):
        return _seekrplugin.vectori___bool__(self)

    def __len__(self):
        return _seekrplugin.vectori___len__(self)

    def __getslice__(self, i, j):
        return _seekrplugin.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _seekrplugin.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _seekrplugin.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _seekrplugin.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _seekrplugin.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _seekrplugin.vectori___setitem__(self, *args)

    def pop(self):
        return _seekrplugin.vectori_pop(self)

    def append(self, x):
        return _seekrplugin.vectori_append(self, x)

    def empty(self):
        return _seekrplugin.vectori_empty(self)

    def size(self):
        return _seekrplugin.vectori_size(self)

    def swap(self, v):
        return _seekrplugin.vectori_swap(self, v)

    def begin(self):
        return _seekrplugin.vectori_begin(self)

    def end(self):
        return _seekrplugin.vectori_end(self)

    def rbegin(self):
        return _seekrplugin.vectori_rbegin(self)

    def rend(self):
        return _seekrplugin.vectori_rend(self)

    def clear(self):
        return _seekrplugin.vectori_clear(self)

    def get_allocator(self):
        return _seekrplugin.vectori_get_allocator(self)

    def pop_back(self):
        return _seekrplugin.vectori_pop_back(self)

    def erase(self, *args):
        return _seekrplugin.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _seekrplugin.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _seekrplugin.vectori_push_back(self, x)

    def front(self):
        return _seekrplugin.vectori_front(self)

    def back(self):
        return _seekrplugin.vectori_back(self)

    def assign(self, n, x):
        return _seekrplugin.vectori_assign(self, n, x)

    def resize(self, *args):
        return _seekrplugin.vectori_resize(self, *args)

    def insert(self, *args):
        return _seekrplugin.vectori_insert(self, *args)

    def reserve(self, n):
        return _seekrplugin.vectori_reserve(self, n)

    def capacity(self):
        return _seekrplugin.vectori_capacity(self)
    __swig_destroy__ = _seekrplugin.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _seekrplugin.vectori_swigregister
vectori_swigregister(vectori)


import simtk.openmm as mm
import simtk.unit as unit

class SeekrForce(simtk.openmm.Force):
    __swig_setmethods__ = {}
    for _s in [simtk.openmm.Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekrForce, name, value)
    __swig_getmethods__ = {}
    for _s in [simtk.openmm.Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekrForce, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _seekrplugin.new_SeekrForce()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSphericalNumIndices(self, forceIndex, molecule):
        val = _seekrplugin.SeekrForce_getSphericalNumIndices(self, forceIndex, molecule)




        return val


    def getSphericalRadius(self, forceIndex, milestone_id):
        val = _seekrplugin.SeekrForce_getSphericalRadius(self, forceIndex, milestone_id)




        return val


    def getSphericalMilestoneAtoms(self, forceIndex, atomIndex, index, molecule):
        return _seekrplugin.SeekrForce_getSphericalMilestoneAtoms(self, forceIndex, atomIndex, index, molecule)

    def getPlanarZNumIndices(self, forceIndex, molecule):
        val = _seekrplugin.SeekrForce_getPlanarZNumIndices(self, forceIndex, molecule)




        return val


    def getPlanarZOffset(self, forceIndex, milestone_id):
        val = _seekrplugin.SeekrForce_getPlanarZOffset(self, forceIndex, milestone_id)




        return val


    def getPlanarZMilestoneAtoms(self, forceIndex, atomIndex, index, molecule):
        return _seekrplugin.SeekrForce_getPlanarZMilestoneAtoms(self, forceIndex, atomIndex, index, molecule)

    def getRmsdNumIndices(self, forceIndex, molecule):
        val = _seekrplugin.SeekrForce_getRmsdNumIndices(self, forceIndex, molecule)




        return val


    def getRmsdRadius(self, forceIndex, milestone_id):
        val = _seekrplugin.SeekrForce_getRmsdRadius(self, forceIndex, milestone_id)




        return val


    def getRmsdMilestoneAtoms(self, forceIndex, atomIndex, index, molecule):
        return _seekrplugin.SeekrForce_getRmsdMilestoneAtoms(self, forceIndex, atomIndex, index, molecule)

    def getEndOnMiddleCrossing(self):
        val = _seekrplugin.SeekrForce_getEndOnMiddleCrossing(self)




        return val


    def setEndOnMiddleCrossing(self, endOnMiddleCrossingArg):
        return _seekrplugin.SeekrForce_setEndOnMiddleCrossing(self, endOnMiddleCrossingArg)

    def getSaveStateFileName(self):
        val = _seekrplugin.SeekrForce_getSaveStateFileName(self)




        return val


    def setSaveStateFileName(self, saveStateFileName):
        return _seekrplugin.SeekrForce_setSaveStateFileName(self, saveStateFileName)

    def getDataFileName(self):
        val = _seekrplugin.SeekrForce_getDataFileName(self)




        return val


    def setDataFileName(self, dataFileNameArg):
        return _seekrplugin.SeekrForce_setDataFileName(self, dataFileNameArg)

    def updateParametersInContext(self, context):
        return _seekrplugin.SeekrForce_updateParametersInContext(self, context)

    def addSphericalMilestone(self, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2):
        return _seekrplugin.SeekrForce_addSphericalMilestone(self, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2)

    def modifySphericalMilestone(self, forceIndex, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2):
        return _seekrplugin.SeekrForce_modifySphericalMilestone(self, forceIndex, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2)

    def addPlanarZMilestone(self, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2):
        return _seekrplugin.SeekrForce_addPlanarZMilestone(self, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2)

    def modifyPlanarZMilestone(self, forceIndex, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2):
        return _seekrplugin.SeekrForce_modifyPlanarZMilestone(self, forceIndex, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2)

    def addRmsdMilestone(self, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2):
        return _seekrplugin.SeekrForce_addRmsdMilestone(self, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2)

    def modifyRmsdMilestone(self, forceIndex, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2):
        return _seekrplugin.SeekrForce_modifyRmsdMilestone(self, forceIndex, numIndices1, numIndices2, radius1, radius2, radius3, atomIndices1, atomIndices2)
    __swig_destroy__ = _seekrplugin.delete_SeekrForce
    __del__ = lambda self: None
SeekrForce_swigregister = _seekrplugin.SeekrForce_swigregister
SeekrForce_swigregister(SeekrForce)

# This file is compatible with both classic and new-style classes.


